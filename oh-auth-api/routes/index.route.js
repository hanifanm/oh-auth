const express = require('express')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const gsend = require('gmail-send')
const animals = require('animals')
const db = require('../db/sequelize')
const rg = require('./utils/response-generator')
const stringUtils = require('./utils/string')

const router = express.Router()
const JWT_KEY = 'WHATISTHIS'

/* GET home page. */
router.get('/', function (req, res, next) {
  res.render('index', { title: 'Express' });
});

async function checkPhoneEmail(req, res, next) {
  try {
    const sameEmail = await db.models.User.findAll({
      where: {
        email: req.body.email
      }
    })
    const sameMobile = await db.models.User.findAll({
      where: {
        phone: req.body.phone
      }
    })
    if (sameEmail.length === 0 && sameMobile.length === 0) {
      next()
    } else {
      let errors = []
      if (sameEmail.length > 0) errors.push('Email has been taken. Please use another email.')
      if (sameMobile.length > 0) errors.push('Mobile number has been taken. Please use another number.')
      res.send(rg(false, null, errors))
    }
  } catch (error) {
    console.error(error)
    res.send(rg(false, null, ['Failed to check email and mobile number']))
  }
}

router.post('/register', checkPhoneEmail, async (req, res, next) => {
  const autoGeneratedPassword = `${animals()}${Math.floor(Math.random() * 100)}`
  const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10)
  try {
    const user = await db.models.User.create({
      phone: req.body.phone,
      first_name: req.body.first_name,
      last_name: req.body.last_name,
      date_of_birth: req.body.date_of_birth,
      gender: req.body.gender,
      email: req.body.email,
      hashed_password: hashedPassword
    })
    const { hashed_password, ...userNoPass } = user.dataValues
    sendEmail(userNoPass, autoGeneratedPassword)
    res.send(rg(true, userNoPass, null))
  } catch (error) {
    console.error(error)
    if (error.errors) {
      res.send(rg(false, null, error.errors.map(e => e.message)))
    } else {
      res.send(rg(false, null, error))
    }
  }
})

router.post('/login', async (req, res, next) => {
  const user = await db.models.User.findOne({
    where: {
      email: req.body.email
    }
  })
  if (user) {
    const match = await bcrypt.compare(req.body.password, user.hashed_password);
    if (match) {
      const { hashed_password, ...response } = user.dataValues
      response.token = jwt.sign({
        user_id: user.dataValues.id,
        user_email: user.dataValues.email
      }, JWT_KEY)
      res.send(rg(true, response, null))
    } else {
      res.send(rg(false, null, ['Email and password pair doesnt match']))
    }
  } else {
    res.send(rg(false, null, ['Email doesnt match any user']))
  }
})

const sendEmail = async (user, password) => {
  console.log(user)
  const web_url = 'https://elated-engelbart-93990b.netlify.com/login'
  const html = `
  <div>
    <h3>Please login to ${web_url} using the following account,</h3>
    <br>
    <p>Email: <b>${user.email}</b></p>
    <p>Password: <b>${password}</b></p>
    <p>Name: <b>${stringUtils.capitalize(user.first_name)} ${stringUtils.capitalize(user.last_name)}</b></p>
    <p>Gender: <b>${stringUtils.capitalize(user.gender)}</b></p>
    <p>Date of birth: <b>${(new Date(user.date_of_birth)).toDateString()}</b></p>
  </div>
  `

  gsend({
    user: process.env.GMAIL_ACCOUNT,
    pass: process.env.GMAIL_PASSWORD,
    to: user.email,
    subject: 'OH-AUTH CREDENTIAL',
    html: html,
  })({})
}

module.exports = router;
