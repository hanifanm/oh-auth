const express = require('express')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const animals = require('animals')
const stringUtils = require('./utils/string')
const db = require('../db/sequelize')

const rg = require('./utils/response-generator')
const checkPhoneEmail = require('./utils/checkPhoneEmail')
const sendEmail = require('./utils/sendEmail')

const router = express.Router()
const JWT_KEY = 'WHATISTHIS'

/* GET home page. */
router.get('/', function (req, res, next) {
  res.render('index', { title: 'Oh-Auth API' });
});

router.post('/register', checkPhoneEmail, async (req, res, next) => {
  const autoGeneratedPassword = `${animals()}${Math.floor(Math.random() * 100)}`
  const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10)
  try {
    const user = await db.models.User.create({
      phone: req.body.phone,
      first_name: req.body.first_name,
      last_name: req.body.last_name,
      date_of_birth: req.body.date_of_birth,
      gender: req.body.gender,
      email: req.body.email,
      hashed_password: hashedPassword
    })
    const { hashed_password, reset_token, ...userNoPass } = user.dataValues
    sendEmail.registration(userNoPass, autoGeneratedPassword)
    res.send(rg(true, userNoPass, null))
  } catch (error) {
    console.error(error)
    if (error.errors) {
      res.send(rg(false, null, error.errors.map(e => e.message)))
    } else {
      res.send(rg(false, null, error))
    }
  }
})

router.post('/login', async (req, res, next) => {
  const user = await db.models.User.findOne({
    where: {
      email: req.body.email
    }
  })
  if (user) {
    const match = await bcrypt.compare(req.body.password, user.hashed_password);
    if (match) {
      const { hashed_password, reset_token, ...response } = user.dataValues
      response.token = jwt.sign({
        user_id: user.dataValues.id,
        user_email: user.dataValues.email
      }, JWT_KEY)
      res.send(rg(true, response, null))
    } else {
      res.send(rg(false, null, ['Email and password pair doesnt match']))
    }
  } else {
    res.send(rg(false, null, ['Email doesnt match any user']))
  }
})

router.post('/forgot', async (req, res, next) => {
  const user = await db.models.User.findOne({
    where: {
      email: req.body.email
    }
  })
  if (user) {
    const token = stringUtils.random()
    try {
      const user = await db.models.User.update({
        reset_token: token,
      }, {
          where: {
            email: req.body.email
          }
        })
      sendEmail.resetPassword(req.body.email, token)
      res.send(rg(true, ['Please check your email'], null))
    } catch (error) {
      console.error(error)
      if (error.errors) {
        res.send(rg(false, null, error.errors.map(e => e.message)))
      } else {
        res.send(rg(false, null, error))
      }
    }
  } else {
    res.send(rg(false, null, ['Email doesnt match any user']))
  }
})

router.post('/reset', async (req, res, next) => {
  if (req.body.token) {
    const user = await db.models.User.findOne({
      where: {
        reset_token: req.body.token
      }
    })
    if (user) {
      console.log(req.body.password, req.body.confirm_password)
      if (req.body.password === req.body.confirm_password) {
        try {
          const hashedPassword = await bcrypt.hash(req.body.password, 10)
          const user = await db.models.User.update({
            reset_token: null,
            hashed_password: hashedPassword
          }, {
              where: {
                reset_token: req.body.token
              }
            })
          res.send(rg(true, ['Success update password'], null))
        } catch (error) {
          console.error(error)
          if (error.errors) {
            res.send(rg(false, null, error.errors.map(e => e.message)))
          } else {
            res.send(rg(false, null, error))
          }
        }
      } else {
        res.send(rg(false, null, ['Confirmation password doesnt match']))
      }
    } else {
      res.send(rg(false, null, ['Reset token is not valid']))
    }
  } else {
    res.send(rg(false, null, ['Reset token is not available']))
  }
})

module.exports = router;
